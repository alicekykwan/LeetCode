class Solution:
    def maxScore(self, nums: List[int]) -> int:
        
        @lru_cache(None)
        def gcd(a,b):
            while b != 0:
                a, b = b, a%b
            return a
    
        n = len(nums)

        #this returns the best score possible given which numbers have been used
        @lru_cache(None)
        def score(used): #used = n-lengthed bitmask with 1 representing used and 0 representing unused 
            # pull out a list of unused bits
            unused = []
            for i in range(n):
                if 1<<i&used == 0:
                    unused.append(i)
            m = len(unused)
            
            # if all bits are used 
            if m == 0: return 0
            
            # this calculates which round of operation (1-indexed) we're on
            rnd = (n-m)//2 + 1
            
            # try all pairs of unused bits
            bestscore = 0
            for j in range(m-1):
                bit1 = unused[j]
                num1 = nums[bit1]
                for k in range(j+1, m):
                    bit2 = unused[k]
                    num2 = nums[bit2]
                    currscore = (gcd(num1, num2) * rnd) + score(used|1<<bit1|1<<bit2)
                    bestscore = max(bestscore, currscore)
            return bestscore
            
            
        return score(0)
        
