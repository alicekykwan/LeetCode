class MyCircularQueue:

    def __init__(self, k: int):
        self.k = k
        self.items = [None] * k
        #when empty:
        self.head = -1
        self.tail = -1
        
    def enQueue(self, value: int) -> bool:
        if self.head != -1 and (self.tail-self.head)%self.k + 1 >= self.k:
            return False
        
        newindex = (self.tail + 1) % self.k
        self.items[newindex] = value
        self.tail = newindex
        if self.head == -1:
            self.head = 0
        return True

    def deQueue(self) -> bool:
        if self.head == -1:
            return False
        #if original length was 1:
        if abs(self.tail-self.head) + 1 == 1:
            self.head = self.tail = -1
        else:
            self.head += 1
            self.head %= self.k
        return True

    def Front(self) -> int:
        if self.head == -1:
            return -1
        return self.items[self.head]

    def Rear(self) -> int:
        if self.head == -1:
            return -1
        return self.items[self.tail]
        

    def isEmpty(self) -> bool:
        return self.head == -1

    def isFull(self) -> bool:
        return (self.tail-self.head)%self.k + 1 == self.k
    

# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
