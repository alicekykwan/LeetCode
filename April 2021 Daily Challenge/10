class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        '''
        turn into graph 
        sort nodes by value in matrix
        bfs from small valued nodes to high        
        '''
        
        R = len(matrix)
        C = len(matrix[0])
       
        adjt = defaultdict(list)
        for r in range(R):
            for c in range(C):
                for nr, nc in [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]:
                    if nr >= R or nr < 0 or nc >= C or nc < 0: continue
                    if matrix[nr][nc] >= matrix[r][c]: continue
                    adjt[(r,c)].append((nr, nc))
        
        nodes = [(r,c) for r in range(R) for c in range(C)]
        nodes.sort(key=lambda x: matrix[x[0]][x[1]])

        best = Counter()
        
        for larger in nodes:
            best[larger] = 1
            for smaller in adjt[larger]:
                best[larger] = max(best[larger], best[smaller] + 1)
        return max(best.values())
