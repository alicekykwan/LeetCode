class Solution:
    def closestRoom(self, rooms: List[List[int]], queries: List[List[int]]) -> List[int]:
        '''
        keep a decreasing(size) stack of rooms from each direction
        binary search for the closest room larger than or eqaul to minsize
        '''
        
        rooms.sort()
        rn = len(rooms)
        queries = sorted([preferred, minSize, i] for i, (preferred, minSize) in enumerate(queries))
        n = len(queries)
        ans = [-1] * n
        
        stack = []
        i = 0
        for preferred, minSize, j in queries:
            # add rooms that are to the left or equal to preferred
            while i < rn and rooms[i][0] <= preferred:
                # pop off rooms that are smaller than or same size as the current room
                while stack and stack[-1][1] <= rooms[i][1]:
                    stack.pop()
                stack.append(rooms[i])
                i += 1
            #binary search for closest room larger than or equal to minSize
            a = -1
            b = len(stack)
            while a + 1 < b:
                mid = (a+b)//2
                if stack[mid][1] >= minSize:
                    a = mid
                else:
                    b = mid
            if a > -1:
                ans[j] = stack[a][0]
        
        rooms.reverse()
        queries.reverse()
        
        stack = []
        i = 0
        for preferred, minSize, j in queries:
            # add rooms that are to the right or equal to preferred
            while i < rn and rooms[i][0] >= preferred:
                # pop off rooms that are smaller than or same size as the current room
                while stack and stack[-1][1] <= rooms[i][1]:
                    stack.pop()
                stack.append(rooms[i])
                i += 1
            #binary search for closest room larger than or equal to minSize
            a = -1
            b = len(stack)
            while a + 1 < b:
                mid = (a+b)//2
                if stack[mid][1] >= minSize:
                    a = mid
                else:
                    b = mid
            if a > -1:
                if ans[j] == -1 or abs(stack[a][0] - preferred) < abs(ans[j] - preferred):
                    ans[j] = stack[a][0]
        
        return ans
