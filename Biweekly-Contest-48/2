class AuthenticationManager:

    def __init__(self, timeToLive: int):
        self.timeToLive = timeToLive
        self.activeTokens = defaultdict()

    def generate(self, tokenId: str, currentTime: int) -> None:
        self.activeTokens[tokenId] =  currentTime + self.timeToLive

    def renew(self, tokenId: str, currentTime: int) -> None:
        if tokenId not in self.activeTokens:
            return
        if currentTime >= self.activeTokens[tokenId]:
            del self.activeTokens[tokenId]
        else: #currentTime < self.activeTokens[tokenId]:
            self.activeTokens[tokenId] = currentTime + self.timeToLive
        
    def countUnexpiredTokens(self, currentTime: int) -> int:
        res = 0
        for tokenId, expireTime in self.activeTokens.items():
            if currentTime < expireTime:
                res += 1
        return res
        


# Your AuthenticationManager object will be instantiated and called as such:
# obj = AuthenticationManager(timeToLive)
# obj.generate(tokenId,currentTime)
# obj.renew(tokenId,currentTime)
# param_3 = obj.countUnexpiredTokens(currentTime)
