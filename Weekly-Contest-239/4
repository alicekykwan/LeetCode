class Solution:
    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:
        '''
        sort intervals by start
        sort queries 
        
        intervals are added to heap recording (len, end)
        
        for each query:
            insert into heap intervals that start at or before query
            pop off the heap intervals that already ended 
            pick the top of the heap
        '''
        
        
        n = len(intervals)
        intervals.sort()
        i = 0
        
        queryindex = [(q, i) for i, q in enumerate(queries)]
        queryindex.sort()
        ans = [-1] * len(queries)
        
        h = []
        
        for q, idx in queryindex:
            while i < n and intervals[i][0] <= q:
                heappush(h, (intervals[i][1]-intervals[i][0]+1, intervals[i][1]))
                i += 1
            while h and h[0][1] < q:
                heappop(h)
            if h:
                ans[idx] = h[0][0]

        return ans
        
